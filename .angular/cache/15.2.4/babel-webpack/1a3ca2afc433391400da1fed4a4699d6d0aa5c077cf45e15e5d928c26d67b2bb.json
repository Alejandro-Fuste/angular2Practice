{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./log.service\";\nimport * as i2 from \"@angular/common/http\";\nexport class StarWarsService {\n  constructor(logSer, http) {\n    this.characters = [{\n      name: \"Luke Skywalker\",\n      side: \"\"\n    }, {\n      name: \"Darth Vader\",\n      side: \"\"\n    }];\n    this.charactersChanged = new Subject();\n    this.logService = logSer;\n    this.http = http;\n  }\n  fetchCharacters() {\n    this.http.get(\"https://swapi.dev/api/\").subscribe(response => {\n      console.log(response);\n    });\n  }\n  getCharacters(chosenList) {\n    if (chosenList === \"all\") {\n      return this.characters.slice();\n    }\n    return this.characters.filter(char => {\n      return char.side === chosenList;\n    });\n  }\n  onSideChosen(charInfo) {\n    const position = this.characters.findIndex(char => {\n      return char.name === charInfo.name;\n    });\n    this.characters[position].side = charInfo.side;\n    this.charactersChanged.next();\n    this.logService.writeLog(`Changed side of ${charInfo.name} to new side: ${charInfo.side}`);\n  }\n  addCharacters(name, side) {\n    const position = this.characters.findIndex(char => {\n      return char.name === name;\n    });\n    if (position !== -1) return;\n    const newCharacter = {\n      name,\n      side\n    };\n    this.characters.push(newCharacter);\n  }\n}\nStarWarsService.ɵfac = function StarWarsService_Factory(t) {\n  return new (t || StarWarsService)(i0.ɵɵinject(i1.LogService), i0.ɵɵinject(i2.HttpClient));\n};\nStarWarsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: StarWarsService,\n  factory: StarWarsService.ɵfac\n});","map":{"version":3,"mappings":"AAIA,SAASA,OAAO,QAAQ,MAAM;;;;AAG9B,OAAM,MAAOC,eAAe;EAU1BC,YAAYC,MAAkB,EAAEC,IAAgB;IATxC,eAAU,GAAoB,CACpC;MAAEC,IAAI,EAAE,gBAAgB;MAAEC,IAAI,EAAE;IAAE,CAAE,EACpC;MAAED,IAAI,EAAE,aAAa;MAAEC,IAAI,EAAE;IAAE,CAAE,CAClC;IAGD,sBAAiB,GAAG,IAAIN,OAAO,EAAQ;IAIrC,IAAI,CAACO,UAAU,GAAGJ,MAAM;IACxB,IAAI,CAACC,IAAI,GAAGA,IAAI;EAClB;EAEAI,eAAe;IACb,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAC,wBAAwB,CAAC,CAACC,SAAS,CAAEC,QAAa,IAAI;MAClEC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;IACvB,CAAC,CAAC;EACJ;EAEAG,aAAa,CAACC,UAAkB;IAC9B,IAAIA,UAAU,KAAK,KAAK,EAAE;MACxB,OAAO,IAAI,CAACC,UAAU,CAACC,KAAK,EAAE;;IAEhC,OAAO,IAAI,CAACD,UAAU,CAACE,MAAM,CAAEC,IAAI,IAAI;MACrC,OAAOA,IAAI,CAACb,IAAI,KAAKS,UAAU;IACjC,CAAC,CAAC;EACJ;EAEAK,YAAY,CAACC,QAAa;IACxB,MAAMC,QAAQ,GAAG,IAAI,CAACN,UAAU,CAACO,SAAS,CAAEJ,IAAI,IAAI;MAClD,OAAOA,IAAI,CAACd,IAAI,KAAKgB,QAAQ,CAAChB,IAAI;IACpC,CAAC,CAAC;IACF,IAAI,CAACW,UAAU,CAACM,QAAQ,CAAC,CAAChB,IAAI,GAAGe,QAAQ,CAACf,IAAI;IAC9C,IAAI,CAACkB,iBAAiB,CAACC,IAAI,EAAE;IAC7B,IAAI,CAAClB,UAAU,CAACmB,QAAQ,CACtB,mBAAmBL,QAAQ,CAAChB,IAAI,iBAAiBgB,QAAQ,CAACf,IAAI,EAAE,CACjE;EACH;EAEAqB,aAAa,CAACtB,IAAY,EAAEC,IAAY;IACtC,MAAMgB,QAAQ,GAAG,IAAI,CAACN,UAAU,CAACO,SAAS,CAAEJ,IAAI,IAAI;MAClD,OAAOA,IAAI,CAACd,IAAI,KAAKA,IAAI;IAC3B,CAAC,CAAC;IAEF,IAAIiB,QAAQ,KAAK,CAAC,CAAC,EAAE;IAErB,MAAMM,YAAY,GAAkB;MAAEvB,IAAI;MAAEC;IAAI,CAAE;IAClD,IAAI,CAACU,UAAU,CAACa,IAAI,CAACD,YAAY,CAAC;EACpC;;AAlDW3B,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAA6B,SAAf7B,eAAe;AAAA","names":["Subject","StarWarsService","constructor","logSer","http","name","side","logService","fetchCharacters","get","subscribe","response","console","log","getCharacters","chosenList","characters","slice","filter","char","onSideChosen","charInfo","position","findIndex","charactersChanged","next","writeLog","addCharacters","newCharacter","push","factory"],"sourceRoot":"","sources":["/Users/alejandro/Desktop/projects/angular2Practice/src/app/star-wars.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { characterType } from \"../types/character\";\nimport { LogService } from \"./log.service\";\nimport { Subject } from \"rxjs\";\n\n@Injectable()\nexport class StarWarsService {\n  private characters: characterType[] = [\n    { name: \"Luke Skywalker\", side: \"\" },\n    { name: \"Darth Vader\", side: \"\" },\n  ];\n\n  private logService: LogService;\n  charactersChanged = new Subject<void>();\n  http: HttpClient;\n\n  constructor(logSer: LogService, http: HttpClient) {\n    this.logService = logSer;\n    this.http = http;\n  }\n\n  fetchCharacters() {\n    this.http.get(\"https://swapi.dev/api/\").subscribe((response: any) => {\n      console.log(response);\n    });\n  }\n\n  getCharacters(chosenList: string) {\n    if (chosenList === \"all\") {\n      return this.characters.slice();\n    }\n    return this.characters.filter((char) => {\n      return char.side === chosenList;\n    });\n  }\n\n  onSideChosen(charInfo: any) {\n    const position = this.characters.findIndex((char) => {\n      return char.name === charInfo.name;\n    });\n    this.characters[position].side = charInfo.side;\n    this.charactersChanged.next();\n    this.logService.writeLog(\n      `Changed side of ${charInfo.name} to new side: ${charInfo.side}`\n    );\n  }\n\n  addCharacters(name: string, side: string) {\n    const position = this.characters.findIndex((char) => {\n      return char.name === name;\n    });\n\n    if (position !== -1) return;\n\n    const newCharacter: characterType = { name, side };\n    this.characters.push(newCharacter);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}